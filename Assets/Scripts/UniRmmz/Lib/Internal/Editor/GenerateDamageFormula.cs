using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using UniRmmz;
using UnityEditor;
using UnityEngine;

public static class GenerateDamageFormula
{
    [MenuItem("UniRmmz/Tools/GenerateDamageFormula")]
    public static async void Generate()
    {
        Rmmz.InitializeManager();
        Rmmz.DataManager.LoadDatabase();
        
        while (!Rmmz.DataManager.IsDatabaseLoaded())
        {
            await Task.Delay(10);
        }

        var outputPath = Path.GetFullPath(Path.Combine(Application.streamingAssetsPath,
            "..\\Scripts\\UniRmmz\\Generated\\RmmzDamageFormula.Generated.cs"));
        var uniqueFormulas = new HashSet<string>(AllDamageFormulas());
        GenerateAndSave(uniqueFormulas, outputPath);
    }

    private static IEnumerable<string> AllDamageFormulas()
    {
        foreach (var data in Rmmz.dataSkills)
        {
            if (data != null)
            {
                yield return data.Damage.Formula;
            }
        }
        
        foreach (var data in Rmmz.dataItems)
        {
            if (data != null)
            {
                yield return data.Damage.Formula;
            }
        }
    }
    
    private static void GenerateAndSave(IEnumerable<string> formulas, string outputPath)
    {
        var generatedCode = GenerateRmmzEvalClass(formulas);
        
        try
        {
            File.WriteAllText(outputPath, generatedCode);
            AssetDatabase.Refresh();
            
            EditorUtility.DisplayDialog("Success", 
                $"Code generated successfully!\nSaved to: {outputPath}", "OK");
        }
        catch (System.Exception e)
        {
            EditorUtility.DisplayDialog("Error", $"Failed to save file: {e.Message}", "OK");
        }
    }
    
    private static string GenerateRmmzEvalClass(IEnumerable<string> formulas)
    {
        var sb = new StringBuilder();
        
        // ファイルヘッダー
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine();
        
        sb.AppendLine("using System;");
        sb.AppendLine("using System.Collections.Generic;");
        sb.AppendLine();
        
        // 名前空間とクラス
        sb.AppendLine($"namespace UniRmmz");
        sb.AppendLine("{");
        sb.AppendLine($"    public static partial class RmmzDamageFormula");
        sb.AppendLine("    {");
        
        // 静的コンストラクタ
        sb.AppendLine("        static RmmzDamageFormula()");
        sb.AppendLine("        {");
        sb.AppendLine("            Clear();");
        
        foreach (var formula in formulas)
        {
            if (string.IsNullOrEmpty(formula)) continue;
            
            var csharpCode = ConvertFormulaToCSharp(formula);
            
            sb.AppendLine($"           _damageFormulaMap.Add(@\"{EscapeString(formula)}\", (a, b, v) =>");
            sb.AppendLine("            {");
            sb.AppendLine($"                return {csharpCode};");
            sb.AppendLine("            });");
            sb.AppendLine();
        }
        
        sb.AppendLine("        }");
        sb.AppendLine();
        
        sb.AppendLine("    }");
        sb.AppendLine("}");
        
        return sb.ToString();
    }
    
    private static string ConvertFormulaToCSharp(string formula)
    {
        var csharpCode = formula;
        
        csharpCode = AutoCapitalizeProperties(csharpCode);
        
        var replacements = new Dictionary<string, string>
        {
            { @"\bv\[(\d+)\]", "v.Value($1)" },
            { @"Math\.", "Mathf." },
        };
        
        foreach (var replacement in replacements)
        {
            csharpCode = Regex.Replace(csharpCode, replacement.Key, replacement.Value);
        }
        
        return $"{csharpCode}";
    }
    
    /// <summary>
    /// プロパティ/メソッド名と思われる単語を先頭大文字にする
    /// </summary>
    private static string AutoCapitalizeProperties(string formula)
    {
        // オブジェクト.プロパティ のパターンを検出して先頭大文字化
        var propertyPattern = @"\b([a-zA-Z_]\w*)\s*\.\s*([a-z][a-zA-Z0-9_]*)\b";
        
        formula = Regex.Replace(formula, propertyPattern, match =>
        {
            var objectName = match.Groups[1].Value;
            var propertyName = match.Groups[2].Value;
            
            // 先頭を大文字に変換
            var capitalizedProperty = char.ToUpper(propertyName[0]) + propertyName.Substring(1);
            
            return $"{objectName}.{capitalizedProperty}";
        });

        // メソッド呼び出しのパターン object.method( を検出
        var methodPattern = @"\b([a-zA-Z_]\w*)\s*\.\s*([a-z][a-zA-Z0-9_]*)\s*\(";
        
        formula = Regex.Replace(formula, methodPattern, match =>
        {
            var objectName = match.Groups[1].Value;
            var methodName = match.Groups[2].Value;
            
            // 先頭を大文字に変換
            var capitalizedMethod = char.ToUpper(methodName[0]) + methodName.Substring(1);
            
            return $"{objectName}.{capitalizedMethod}(";
        });

        return formula;
    }
    
    private static string EscapeString(string input)
    {
        return input?.Replace("\\", "\\\\").Replace("\"", "\\\"") ?? "";
    }
}
